AWSTemplateFormatVersion: '2010-09-09'
Description: Combined infrastructure setup with S3 for frontend, Lambda for backend, and API Gateway

Parameters:
  LambdaS3Bucket:
    Type: String
    Description: S3 bucket where Lambda code is stored

Resources:
  # S3 Bucket for Frontend
  leesa9019432FrontendBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: leesa9019432-frontend-bucket-9121857
      WebsiteConfiguration:
        IndexDocument: index.html

  # IAM Role for Lambda Execution
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # Lambda Function
  MyLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref LambdaS3Bucket
        S3Key: lambda.zip
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 5

  # API Gateway
  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: leesa9019432ApiGateway

  LambdaApiGatewayResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId:
        Fn::GetAtt:
          - ApiGateway
          - RootResourceId
      PathPart: 'api'
      RestApiId: !Ref ApiGateway

  LambdaMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref LambdaApiGatewayResource
      RestApiId: !Ref ApiGateway
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - LambdaArn: !GetAtt MyLambdaFunction.Arn

  LambdaPermissionApiGateway:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref MyLambdaFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/api'

Outputs:
  WebsiteURL:
    Value: !GetAtt leesa9019432FrontendBucket.WebsiteURL
    Description: URL for website hosted on S3

  ApiEndpoint:
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/api'
    Description: URL of the API Gateway endpoint
