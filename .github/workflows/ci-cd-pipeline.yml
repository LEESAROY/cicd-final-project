name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  source:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }} 

  build:
    runs-on: ubuntu-latest
    needs: source
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install Dependencies
        run: npm install
      - name: List Files for Debugging
        run: ls -R
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region us-east-1  # Updated region
      - name: Validate CloudFormation Templates
        run: |
          aws cloudformation validate-template --template-body file://cloudformation/s3.yaml
          aws cloudformation validate-template --template-body file://cloudformation/iam.yaml
          aws cloudformation validate-template --template-body file://cloudformation/lambda.yaml
          aws cloudformation validate-template --template-body file://cloudformation/api-gateway.yaml

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Install Dependencies
        run: npm install
      - name: Run Unit Tests
        run: npm test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy S3 Bucket
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/s3.yaml \
            --stack-name frontend-s3-bucket \
            --capabilities CAPABILITY_IAM
      - name: Install Dependencies
        run: npm install
      - name: Create lambda.zip
        run: zip -r lambda.zip index.js node_modules
      - name: Upload lambda.zip to S3 
        env: 
          S3_BUCKET: leesa9019432-frontend-bucket-10122024101
        run: |
          aws s3 cp lambda.zip s3://$S3_BUCKET/lambda.zip --region us-east-1
      - name: Sync S3 Bucket
        env:
          S3_BUCKET: leesa9019432-frontend-bucket-10122024101
        run: |
          aws s3 sync public/ s3://$S3_BUCKET/ --region us-east-1
      
      - name: Deploy IAM Role
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/iam.yaml \
            --stack-name lambda-execution-role \
            --capabilities CAPABILITY_IAM
      - name: Deploy Lambda Function
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/lambda.yaml \
            --stack-name backend-lambda \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides LambdaS3Bucket=leesa9019432-frontend-bucket-10122024101 LambdaExecutionRoleArn=$(aws cloudformation describe-stacks \
            --stack-name lambda-execution-role \
            --query "Stacks[0].Outputs[?OutputKey=='LambdaExecutionRoleArn'].OutputValue" \
            --output text)
      - name: Deploy API Gateway
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/api-gateway.yaml \
            --stack-name api-gateway \
            --parameter-overrides MyLambdaFunctionArn=$(aws cloudformation describe-stacks \
            --stack-name backend-lambda --query "Stacks[0].Outputs[?OutputKey=='MyLambdaFunctionArn'].OutputValue" \
            --output text)
